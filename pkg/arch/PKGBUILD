# Maintainer: ibrahimsql ibrahimsql@proton.me
# GoCat - Modern Netcat Alternative for Arch Linux

pkgname=gocat
pkgver=1.0.0
pkgrel=1
pkgdesc="Modern netcat alternative written in Go with enhanced features"
arch=('x86_64' 'aarch64' 'armv7h')
url="https://github.com/ibrahmsql/gocat"
license=('MIT')
depends=('glibc')
optdepends=(
    'bash-completion: for bash completion support'
    'zsh-completions: for zsh completion support'
)
makedepends=('go')
conflicts=('netcat' 'openbsd-netcat')
provides=('netcat')
source=("$pkgname-$pkgver.tar.gz::$url/archive/refs/tags/v$pkgver.tar.gz")
sha256sums=('d5558cd419c8d46bdc958064cb97f963d1ea793866414c025906ec15033512ed')  # Updated with actual release hash

# Color output for build process
if [[ -z "${BLUE:-}" ]]; then   
    readonly BLUE='\033[0;34m'
    readonly GREEN='\033[0;32m'
    readonly YELLOW='\033[1;33m'
    readonly NC='\033[0m'
fi

msg_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

msg_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

msg_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

prepare() {
    msg_info "Preparing GoCat build environment..."
    
    # The extracted directory should be gocat-1 (from v1.tar.gz)
    if [ -d "gocat-1" ]; then
        cd "gocat-1"
    elif [ -d "$pkgname-$pkgver" ]; then
        cd "$pkgname-$pkgver"
    else
        # List available directories for debugging
        msg_warning "Available directories: $(ls -la)"
        # Try to find any gocat directory
        local gocat_dir=$(find . -maxdepth 1 -type d -name "gocat*" | head -1)
        if [ -n "$gocat_dir" ]; then
            cd "$gocat_dir"
            msg_info "Using directory: $gocat_dir"
        else
            msg_warning "No gocat directory found, staying in current directory"
        fi
    fi
    
    # Verify we have Go source files
    if [ ! -f main.go ] && [ ! -f "*.go" ]; then
        msg_warning "No Go files found in current directory: $(pwd)"
        msg_info "Directory contents: $(ls -la)"
    fi
    
    # Initialize Go modules if needed
    if [ ! -f go.mod ]; then
        go mod init github.com/ibrahmsql/gocat
        go mod tidy
    fi
    
    msg_success "Build environment prepared"
}

build() {
    msg_info "Building GoCat for $CARCH..."
    
    # Find the correct source directory
    local srcdir="gocat-1"
    if [ ! -d "$srcdir" ]; then
        srcdir=$(find . -maxdepth 1 -type d -name "gocat-*" | head -1)
        if [ -z "$srcdir" ]; then
            msg_warning "No gocat source directory found!"
            return 1
        fi
        srcdir=${srcdir#./}
    fi
    
    cd "$srcdir"
    
    # Set Go build environment
    export CGO_ENABLED=0
    export GOOS=linux
    
    case "$CARCH" in
        x86_64)
            export GOARCH=amd64
            ;;
        aarch64)
            export GOARCH=arm64
            ;;
        armv7h)
            export GOARCH=arm
            export GOARM=7
            ;;
    esac
    
    # Build flags for optimization
    local ldflags="
        -s -w
        -X github.com/ibrahmsql/gocat/cmd.version=$pkgver
        -X github.com/ibrahmsql/gocat/cmd.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)
        -X github.com/ibrahmsql/gocat/cmd.gitCommit=$(git rev-parse --short HEAD 2>/dev/null || echo 'arch-build')
        -X github.com/ibrahmsql/gocat/cmd.gitBranch=main
        -X github.com/ibrahmsql/gocat/cmd.builtBy=makepkg
    "
    
    # Build the binary
    go build \
        -trimpath \
        -buildmode=pie \
        -mod=readonly \
        -modcacherw \
        -ldflags="$ldflags" \
        -o "$pkgname" \
        .
    
    msg_success "Build completed successfully"
}

check() {
    msg_info "Running tests..."
    
    # Find the correct source directory
    local srcdir="gocat-1"
    if [ ! -d "$srcdir" ]; then
        srcdir=$(find . -maxdepth 1 -type d -name "gocat-*" | head -1)
        if [ -z "$srcdir" ]; then
            msg_warning "No gocat source directory found!"
            return 1
        fi
        srcdir=${srcdir#./}
    fi
    
    cd "$srcdir"
    
    # Run Go tests
    go test -v ./...
    
    # Basic functionality test
    ./$pkgname --help >/dev/null
    ./$pkgname --version >/dev/null
    
    msg_success "All tests passed"
}

package() {
    msg_info "Packaging GoCat..."
    
    # Find the correct source directory
    local srcdir="gocat-1"
    if [ ! -d "$srcdir" ]; then
        srcdir=$(find . -maxdepth 1 -type d -name "gocat-*" | head -1)
        if [ -z "$srcdir" ]; then
            msg_warning "No gocat source directory found!"
            return 1
        fi
        srcdir=${srcdir#./}
    fi
    
    cd "$srcdir"
    
    # Install binary
    install -Dm755 "$pkgname" "$pkgdir/usr/bin/$pkgname"
    
    # Create compatibility symlink
    ln -s "/usr/bin/$pkgname" "$pkgdir/usr/bin/nc"
    
    # Install documentation
    install -Dm644 README.md "$pkgdir/usr/share/doc/$pkgname/README.md"
    
    # Create and install man page
    mkdir -p "$pkgdir/usr/share/man/man1"
    cat > "$pkgdir/usr/share/man/man1/$pkgname.1" << 'EOF'
.TH GOCAT 1 "January 2024" "gocat" "User Commands"
.SH NAME
gocat \- modern netcat alternative written in Go
.SH SYNOPSIS
.B gocat
[\fIGLOBAL OPTIONS\fR] \fICOMMAND\fR [\fICOMMAND OPTIONS\fR] [\fIARGUMENTS\fR...]
.SH DESCRIPTION
GoCat is a modern, feature-rich alternative to netcat written in Go. It provides enhanced functionality for network communication, debugging, and penetration testing with improved IPv6 support, interactive modes, and cross-platform compatibility.
.SH COMMANDS
.TP
.B connect, c
Connect to a remote host
.TP
.B listen, l
Start a listener for incoming connections
.TP
.B help, h
Show help information
.SH GLOBAL OPTIONS
.TP
.B \-h, \-\-help
Show help
.TP
.B \-v, \-\-version
Show version information
.SH EXAMPLES
.TP
Start a listener on port 8080:
.B gocat listen 8080
.TP
Connect to a remote host:
.B gocat connect example.com 8080
.TP
Start interactive listener:
.B gocat listen -i 8080
.TP
Local interactive mode:
.B gocat listen -l 8080
.SH FEATURES
.IP \[bu] 2
TCP connection handling (client and server modes)
.IP \[bu] 2
Interactive and local interactive modes
.IP \[bu] 2
IPv6 support with proper address formatting
.IP \[bu] 2
Signal handling and graceful shutdown
.IP \[bu] 2
Cross-platform support
.IP \[bu] 2
Colored logging output
.IP \[bu] 2
Command history in interactive mode
.SH SEE ALSO
.BR nc (1),
.BR netcat (1),
.BR socat (1)
.SH AUTHOR
Written by Ibrahim.
.SH REPORTING BUGS
Report bugs to: https://github.com/ibrahmsql/gocat/issues
.SH COPYRIGHT
Copyright Â© 2024 Ibrahim. License MIT.
EOF
    
    # Install license
    if [ -f LICENSE ]; then
        install -Dm644 LICENSE "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
    fi
    
    # Install bash completion
    mkdir -p "$pkgdir/usr/share/bash-completion/completions"
    cat > "$pkgdir/usr/share/bash-completion/completions/$pkgname" << 'EOF'
# GoCat bash completion
_gocat() {
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    
    # Main commands
    if [[ ${COMP_CWORD} == 1 ]]; then
        opts="connect listen help"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
    
    # Command-specific options
    case "${COMP_WORDS[1]}" in
        connect|c)
            opts="-h --help -s --shell"
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            ;;
        listen|l)
            opts="-h --help -b --block-signals -e --exec -i --interactive -l --local-interactive"
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            ;;
    esac
}

complete -F _gocat gocat
complete -F _gocat nc  # For compatibility
EOF
    
    # Install zsh completion
    mkdir -p "$pkgdir/usr/share/zsh/site-functions"
    cat > "$pkgdir/usr/share/zsh/site-functions/_$pkgname" << 'EOF'
#compdef gocat nc

# GoCat zsh completion
_gocat() {
    local context state line
    typeset -A opt_args
    
    _arguments -C \
        '1: :_gocat_commands' \
        '*::arg:->args'
    
    case $state in
        args)
            case $words[1] in
                connect|c)
                    _arguments \
                        '(-h --help)'{-h,--help}'[Show help]' \
                        '(-s --shell)'{-s,--shell}'[Specify shell]:shell:_command_names' \
                        '*:host:_hosts'
                    ;;
                listen|l)
                    _arguments \
                        '(-h --help)'{-h,--help}'[Show help]' \
                        '(-b --block-signals)'{-b,--block-signals}'[Block exit signals]' \
                        '(-e --exec)'{-e,--exec}'[Execute command]:command:_command_names' \
                        '(-i --interactive)'{-i,--interactive}'[Interactive mode]' \
                        '(-l --local-interactive)'{-l,--local-interactive}'[Local interactive mode]' \
                        '*:port:_ports'
                    ;;
            esac
            ;;
    esac
}

_gocat_commands() {
    local commands
    commands=(
        'connect:Connect to a remote host'
        'listen:Start a listener for incoming connections'
        'help:Show help information'
    )
    _describe 'commands' commands
}

_gocat "$@"
EOF
    
    msg_success "Packaging completed"
}

# Post-install message
post_install() {
    echo -e "\n\033[0;32m==> GoCat installed successfully!\033[0m"
    echo -e "\033[0;36m==> Usage: gocat --help\033[0m"
    echo -e "\033[0;36m==> Man page: man gocat\033[0m"
    echo -e "\033[0;33m==> Note: gocat provides 'nc' compatibility symlink\033[0m"
}

post_upgrade() {
    post_install
}

post_remove() {
    echo -e "\033[0;33m==> GoCat has been removed\033[0m"
}